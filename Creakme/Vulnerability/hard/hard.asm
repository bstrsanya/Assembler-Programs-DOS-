.model tiny
.code
org 100h
locals @@

LenPassword equ 5

Start:	
		mov ax, 0900h			; Print invite str		
		mov dx, offset InviteInput	; 09 func 21 interrupts
		int 21h				; dx = addr str

		call ReadPassword		; func read password

		mov ax, 0900h			; Print new str
		mov dx, offset NewStr		; 09 func 21 interrupts
		int 21h				; dx = addr str

		call CheckPassword		; check password
	
		cmp cx, 01h			; if (password == correct)
		je @@Right			; 	jmp @@Right

		mov ax, 0900h			; Print msg password is 
		mov dx, offset NegativeAnswer	; 	      incorrect
		int 21h
		jmp @@Finish

	@@Right:
		mov ax, 0900h			; Print msg password is
		mov dx, offset PositiveAnswer	;               correct
		int 21h

	@@Finish:
		mov ax, 4c00h			; return 0
		int 21h

;---------------------------------------------
;	ReadPassword before entering enter
;	Entry: 	Noun
;	Exit: 	Noun
;	Destr: 	AX, DI
;---------------------------------------------

ReadPassword	proc
		
		mov di, offset Buffer		; addr for save password
		mov ah, 01h			; 01 func 21 interrupts
		int 21h				; input one (byte) smb
	
	@@Begin:	
		cmp al, 0Dh			; if (smb == enter)
		je @@Finish			; 	jmp @@Finish
		stosb				; es:[di++] = al
		int 21h
		jmp @@Begin			; while (true)
						; 	jmp @@Begin
	@@Finish:
		nop
		ret 
		endp

;---------------------------------------------
;	Check password using hash sum
;	Entry: 	Noun
;	Exit: 	CX = correct or incorrect
;				 password
;	Destr: 	AX, BX, DI
;---------------------------------------------

CheckPassword	proc
		
		mov di, offset Buffer		; di = addr password
		
		xor ax, ax
		xor bx, bx
		
		mov al, [di]			; for example password = ABCDE
		mov bl, [di + 2]		; if (A + C + E - B - D == 30)
		add ax, bx			; 	password correct
		mov bl, [di + 4]		;	cx = 1
		add ax, bx			; else
		mov bl, [di + 1]		; 	password incorrect
		sub ax, bx			; 	cx = 0
		mov bl, [di + 3]
		sub ax, bx

		cmp ax, 30h
		jne @@Wrong

		mov cx, 01h
		jmp @@Finish

	@@Wrong:
		xor cx, cx

	@@Finish:
		nop
		ret
		endp

InviteInput     db 'Enter password:$ '
CorrectPassword db 'ANVQ2'
NegativeAnswer  db 'Wrong password$'
PositiveAnswer  db 'Correct password$'
NewStr          db 0Dh, 0Ah, '$'
Buffer          db LenPassword dup(0)	

end Start